
Digital Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000a7e  00000b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cf  00800082  00800082  00000b34  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014d  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000015d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0a  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000553  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00002b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  000034e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  000038b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009db  00000000  00000000  00003c55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 35       	cpi	r26, 0x51	; 81
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  8a:	0c 94 3d 05 	jmp	0xa7a	; 0xa7a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:

/*************************************************************************************************/

void app_init (void)
{
	lcd_init();
  92:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <lcd_init>
	rtc_init();
  96:	0e 94 1d 02 	call	0x43a	; 0x43a <rtc_init>
	set_externalInterrupt(INT0,FALLING_EDGE);
  9a:	86 e0       	ldi	r24, 0x06	; 6
  9c:	63 e0       	ldi	r22, 0x03	; 3
  9e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <set_externalInterrupt>
  a2:	08 95       	ret

000000a4 <update_date>:
}

/*************************************************************************************************/

void update_date (void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
	lcd_gotoxy(10,1);
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	0e 94 43 04 	call	0x886	; 0x886 <lcd_gotoxy>
	switch(day)
  b0:	80 91 85 00 	lds	r24, 0x0085
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	f9 f0       	breq	.+62     	; 0xf6 <update_date+0x52>
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	38 f4       	brcc	.+14     	; 0xca <update_date+0x26>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	89 f0       	breq	.+34     	; 0xe2 <update_date+0x3e>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	a0 f4       	brcc	.+40     	; 0xec <update_date+0x48>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	59 f5       	brne	.+86     	; 0x11e <update_date+0x7a>
  c8:	07 c0       	rjmp	.+14     	; 0xd8 <update_date+0x34>
  ca:	86 30       	cpi	r24, 0x06	; 6
  cc:	f1 f0       	breq	.+60     	; 0x10a <update_date+0x66>
  ce:	86 30       	cpi	r24, 0x06	; 6
  d0:	b8 f0       	brcs	.+46     	; 0x100 <update_date+0x5c>
  d2:	87 30       	cpi	r24, 0x07	; 7
  d4:	21 f5       	brne	.+72     	; 0x11e <update_date+0x7a>
  d6:	1e c0       	rjmp	.+60     	; 0x114 <update_date+0x70>
	{
		case 1:
			lcd_print("SAT");
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
			break;
  e0:	22 c0       	rjmp	.+68     	; 0x126 <update_date+0x82>
		case 2:
			lcd_print("SUN");
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
			break;
  ea:	1d c0       	rjmp	.+58     	; 0x126 <update_date+0x82>
		case 3:
			lcd_print("MON");
  ec:	88 e6       	ldi	r24, 0x68	; 104
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
			break;
  f4:	18 c0       	rjmp	.+48     	; 0x126 <update_date+0x82>
		case 4:
			lcd_print("TUE");
  f6:	8c e6       	ldi	r24, 0x6C	; 108
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
			break;
  fe:	13 c0       	rjmp	.+38     	; 0x126 <update_date+0x82>
		case 5:
			lcd_print("WED");
 100:	80 e7       	ldi	r24, 0x70	; 112
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
			break;
 108:	0e c0       	rjmp	.+28     	; 0x126 <update_date+0x82>
		case 6:
			lcd_print("THR");
 10a:	84 e7       	ldi	r24, 0x74	; 116
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
			break;
 112:	09 c0       	rjmp	.+18     	; 0x126 <update_date+0x82>
		case 7:
			lcd_print("FRI");
 114:	88 e7       	ldi	r24, 0x78	; 120
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
			break;
 11c:	04 c0       	rjmp	.+8      	; 0x126 <update_date+0x82>
		default:
			lcd_print("ERR");
 11e:	8c e7       	ldi	r24, 0x7C	; 124
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	}
	lcd_gotoxy(1,2);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	0e 94 43 04 	call	0x886	; 0x886 <lcd_gotoxy>
	if(date < 10)		lcdData('0');
 12e:	80 91 84 00 	lds	r24, 0x0084
 132:	8a 30       	cpi	r24, 0x0A	; 10
 134:	18 f4       	brcc	.+6      	; 0x13c <update_date+0x98>
 136:	80 e3       	ldi	r24, 0x30	; 48
 138:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
	lcd_print(itoa((int)date,str1,10));
 13c:	80 91 84 00 	lds	r24, 0x0084
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	69 e8       	ldi	r22, 0x89	; 137
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	4a e0       	ldi	r20, 0x0A	; 10
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 14e:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	lcd_print(":");
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	
	if(month < 10)	lcdData('0');
 15a:	80 91 83 00 	lds	r24, 0x0083
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	18 f4       	brcc	.+6      	; 0x168 <update_date+0xc4>
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
	lcd_print(itoa((int)month,str1,10));
 168:	c9 e8       	ldi	r28, 0x89	; 137
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	80 91 83 00 	lds	r24, 0x0083
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	be 01       	movw	r22, r28
 174:	4a e0       	ldi	r20, 0x0A	; 10
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 17c:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	lcd_print(":");
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	
	lcdData('2');
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
	lcdData('0');
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
	lcd_print(itoa((int)year,str1,10));
 194:	80 91 82 00 	lds	r24, 0x0082
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	be 01       	movw	r22, r28
 19c:	4a e0       	ldi	r20, 0x0A	; 10
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 1a4:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <update_time>:

/*************************************************************************************************/

void update_time (void)
{
	lcd_gotoxy(1,1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	0e 94 43 04 	call	0x886	; 0x886 <lcd_gotoxy>
	if(hours < 10)		lcdData('0');
 1b6:	80 91 86 00 	lds	r24, 0x0086
 1ba:	8a 30       	cpi	r24, 0x0A	; 10
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <update_time+0x16>
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
	lcd_print(itoa((int)hours,str1,10));
 1c4:	80 91 86 00 	lds	r24, 0x0086
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	69 e8       	ldi	r22, 0x89	; 137
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	4a e0       	ldi	r20, 0x0A	; 10
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 1d6:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	lcd_print(":");
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	
	if(minutes < 10)	lcdData('0');
 1e2:	80 91 87 00 	lds	r24, 0x0087
 1e6:	8a 30       	cpi	r24, 0x0A	; 10
 1e8:	18 f4       	brcc	.+6      	; 0x1f0 <update_time+0x42>
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
	lcd_print(itoa((int)minutes,str1,10));
 1f0:	80 91 87 00 	lds	r24, 0x0087
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	69 e8       	ldi	r22, 0x89	; 137
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	4a e0       	ldi	r20, 0x0A	; 10
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 202:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	lcd_print(":");
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	
	if(seconds < 10)	lcdData('0');
 20e:	80 91 88 00 	lds	r24, 0x0088
 212:	8a 30       	cpi	r24, 0x0A	; 10
 214:	18 f4       	brcc	.+6      	; 0x21c <update_time+0x6e>
 216:	80 e3       	ldi	r24, 0x30	; 48
 218:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
	lcd_print(itoa((int)seconds,str1,10));
 21c:	80 91 88 00 	lds	r24, 0x0088
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	69 e8       	ldi	r22, 0x89	; 137
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	4a e0       	ldi	r20, 0x0A	; 10
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 22e:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
}
 232:	08 95       	ret

00000234 <__vector_1>:
}

/********************************************ISR for INT0******************************************/

ISR(INT0_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	cli();
 256:	f8 94       	cli

	if(++seconds == 60)
 258:	80 91 88 00 	lds	r24, 0x0088
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	80 93 88 00 	sts	0x0088, r24
 262:	8c 33       	cpi	r24, 0x3C	; 60
 264:	39 f4       	brne	.+14     	; 0x274 <__vector_1+0x40>
	{
		seconds = 0;
 266:	10 92 88 00 	sts	0x0088, r1
		minutes++;
 26a:	80 91 87 00 	lds	r24, 0x0087
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	80 93 87 00 	sts	0x0087, r24
	}
	
	if(minutes == 60)
 274:	80 91 87 00 	lds	r24, 0x0087
 278:	8c 33       	cpi	r24, 0x3C	; 60
 27a:	39 f4       	brne	.+14     	; 0x28a <__vector_1+0x56>
	{
		minutes = 0;
 27c:	10 92 87 00 	sts	0x0087, r1
		hours++;
 280:	80 91 86 00 	lds	r24, 0x0086
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	80 93 86 00 	sts	0x0086, r24
	}
	
	if(hours == 24)
 28a:	80 91 86 00 	lds	r24, 0x0086
 28e:	88 31       	cpi	r24, 0x18	; 24
 290:	61 f4       	brne	.+24     	; 0x2aa <__vector_1+0x76>
	{
		hours = 0;
 292:	10 92 86 00 	sts	0x0086, r1
		date++;
 296:	80 91 84 00 	lds	r24, 0x0084
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 84 00 	sts	0x0084, r24
		day++;
 2a0:	80 91 85 00 	lds	r24, 0x0085
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 85 00 	sts	0x0085, r24
	}
	if(day == 8)
 2aa:	80 91 85 00 	lds	r24, 0x0085
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	19 f4       	brne	.+6      	; 0x2b8 <__vector_1+0x84>
	{
		day = 1;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 85 00 	sts	0x0085, r24
	}
	if(date == 32)
 2b8:	80 91 84 00 	lds	r24, 0x0084
 2bc:	80 32       	cpi	r24, 0x20	; 32
 2be:	49 f4       	brne	.+18     	; 0x2d2 <__vector_1+0x9e>
	{
		month++;
 2c0:	80 91 83 00 	lds	r24, 0x0083
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 83 00 	sts	0x0083, r24
		date = 1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 84 00 	sts	0x0084, r24
 2d0:	15 c0       	rjmp	.+42     	; 0x2fc <__vector_1+0xc8>
	}
	else if(date == 31)
 2d2:	8f 31       	cpi	r24, 0x1F	; 31
 2d4:	99 f4       	brne	.+38     	; 0x2fc <__vector_1+0xc8>
	{
		switch(month)
 2d6:	80 91 83 00 	lds	r24, 0x0083
 2da:	86 30       	cpi	r24, 0x06	; 6
 2dc:	49 f0       	breq	.+18     	; 0x2f0 <__vector_1+0xbc>
 2de:	87 30       	cpi	r24, 0x07	; 7
 2e0:	18 f4       	brcc	.+6      	; 0x2e8 <__vector_1+0xb4>
 2e2:	84 30       	cpi	r24, 0x04	; 4
 2e4:	59 f4       	brne	.+22     	; 0x2fc <__vector_1+0xc8>
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <__vector_1+0xbc>
 2e8:	89 30       	cpi	r24, 0x09	; 9
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <__vector_1+0xbc>
 2ec:	8b 30       	cpi	r24, 0x0B	; 11
 2ee:	31 f4       	brne	.+12     	; 0x2fc <__vector_1+0xc8>
		{
			case 4:
			case 6:
			case 9:
			case 11:
			month++;
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 83 00 	sts	0x0083, r24
			date = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 84 00 	sts	0x0084, r24
			break;
		}
	}
	
	if(month == 13)
 2fc:	80 91 83 00 	lds	r24, 0x0083
 300:	8d 30       	cpi	r24, 0x0D	; 13
 302:	41 f4       	brne	.+16     	; 0x314 <__vector_1+0xe0>
	{
		year++;
 304:	80 91 82 00 	lds	r24, 0x0082
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 82 00 	sts	0x0082, r24
		month = 1;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 83 00 	sts	0x0083, r24
	}
	
	update_time();
 314:	0e 94 d7 00 	call	0x1ae	; 0x1ae <update_time>
	update_date();
 318:	0e 94 52 00 	call	0xa4	; 0xa4 <update_date>
	
	sei();
 31c:	78 94       	sei
}
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <BCD_to_int>:
/*************************************************************************************************/

uint8_t BCD_to_int(uint8_t data)
{
	uint8_t temp = 0;
	temp += (data >> 4) * 10;
 340:	98 2f       	mov	r25, r24
 342:	92 95       	swap	r25
 344:	9f 70       	andi	r25, 0x0F	; 15
 346:	99 0f       	add	r25, r25
 348:	29 2f       	mov	r18, r25
 34a:	22 0f       	add	r18, r18
 34c:	22 0f       	add	r18, r18
 34e:	92 0f       	add	r25, r18
	temp += (data & 0x0F);
 350:	8f 70       	andi	r24, 0x0F	; 15
	return temp;
}
 352:	89 0f       	add	r24, r25
 354:	08 95       	ret

00000356 <main>:

/***************************************************************************************************/

int main(void)
{	
	app_init();
 356:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	rtc_setTime(0x23,0x59,0x55);
 35a:	83 e2       	ldi	r24, 0x23	; 35
 35c:	69 e5       	ldi	r22, 0x59	; 89
 35e:	45 e5       	ldi	r20, 0x55	; 85
 360:	0e 94 5f 02 	call	0x4be	; 0x4be <rtc_setTime>
	rtc_setDate(0x01,0x30,0x04,0x14);
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	60 e3       	ldi	r22, 0x30	; 48
 368:	44 e0       	ldi	r20, 0x04	; 4
 36a:	24 e1       	ldi	r18, 0x14	; 20
 36c:	0e 94 b8 02 	call	0x570	; 0x570 <rtc_setDate>
	rtc_getTime(&seconds, &minutes, &hours);
 370:	88 e8       	ldi	r24, 0x88	; 136
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	67 e8       	ldi	r22, 0x87	; 135
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	46 e8       	ldi	r20, 0x86	; 134
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	0e 94 2e 02 	call	0x45c	; 0x45c <rtc_getTime>
	rtc_getDate(&day, &date, &month, &year);
 380:	85 e8       	ldi	r24, 0x85	; 133
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	64 e8       	ldi	r22, 0x84	; 132
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	43 e8       	ldi	r20, 0x83	; 131
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	22 e8       	ldi	r18, 0x82	; 130
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	0e 94 7d 02 	call	0x4fa	; 0x4fa <rtc_getDate>
	seconds = BCD_to_int(seconds);
 394:	80 91 88 00 	lds	r24, 0x0088
 398:	0e 94 a0 01 	call	0x340	; 0x340 <BCD_to_int>
 39c:	80 93 88 00 	sts	0x0088, r24
	minutes = BCD_to_int(minutes);
 3a0:	80 91 87 00 	lds	r24, 0x0087
 3a4:	0e 94 a0 01 	call	0x340	; 0x340 <BCD_to_int>
 3a8:	80 93 87 00 	sts	0x0087, r24
	hours   = BCD_to_int(hours);
 3ac:	80 91 86 00 	lds	r24, 0x0086
 3b0:	0e 94 a0 01 	call	0x340	; 0x340 <BCD_to_int>
 3b4:	80 93 86 00 	sts	0x0086, r24
	day		= BCD_to_int(day);
 3b8:	80 91 85 00 	lds	r24, 0x0085
 3bc:	0e 94 a0 01 	call	0x340	; 0x340 <BCD_to_int>
 3c0:	80 93 85 00 	sts	0x0085, r24
	date    = BCD_to_int(date);
 3c4:	80 91 84 00 	lds	r24, 0x0084
 3c8:	0e 94 a0 01 	call	0x340	; 0x340 <BCD_to_int>
 3cc:	80 93 84 00 	sts	0x0084, r24
	month   = BCD_to_int(month);
 3d0:	80 91 83 00 	lds	r24, 0x0083
 3d4:	0e 94 a0 01 	call	0x340	; 0x340 <BCD_to_int>
 3d8:	80 93 83 00 	sts	0x0083, r24
	year    = BCD_to_int(year);
 3dc:	80 91 82 00 	lds	r24, 0x0082
 3e0:	0e 94 a0 01 	call	0x340	; 0x340 <BCD_to_int>
 3e4:	80 93 82 00 	sts	0x0082, r24
	sei();
 3e8:	78 94       	sei
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <main+0x94>

000003ec <rtc_clear_CH_bit>:
//This function clears the CH bit in the first place in DS1307 RAM which is 0x00
//as the CH bit is undefined upon reset and it must equal to zero to enable the 
//oscillator. 

void rtc_clear_CH_bit(void)
{
 3ec:	cf 93       	push	r28
	uint8_t seconds = 0;
	
	TWI_start();						//Start condition	
 3ee:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,0);			//SLA + W
 3f2:	80 ed       	ldi	r24, 0xD0	; 208
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	TWI_sendData(0x00);					//Register pointer = 0x00
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_start();						//Repeated start condition
 400:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,1);			//SLA + R
 404:	80 ed       	ldi	r24, 0xD0	; 208
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	seconds = TWI_receiveData(1);		//Read one byte and return NACK
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 412:	c8 2f       	mov	r28, r24
	seconds &= ~(1 << 7);				//Clear CH bit (bit number 7)
	TWI_stop();							//Stop condition
 414:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
	
	TWI_start();						//Start condition
 418:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,0);			//SLA + W
 41c:	80 ed       	ldi	r24, 0xD0	; 208
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	TWI_sendData(0x00);					//Register pointer = 0x00
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(seconds);				//Write seconds again (after clearing bit 7)
 42a:	8c 2f       	mov	r24, r28
 42c:	8f 77       	andi	r24, 0x7F	; 127
 42e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_stop();							//Stop condition
 432:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
}
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <rtc_init>:
//which means that the square wave enable pin is set to 1. and clear bits RS0 and RS1
//so that a 1KHz square wave will be available on SQW/OUT pin. 

void rtc_init(void)
{	
	TWI_start();						//Start condition
 43a:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0XD0,0);			//SLA + W
 43e:	80 ed       	ldi	r24, 0xD0	; 208
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	TWI_sendData(0x07);					//Register pointer = 0x07 (Control Register)
 446:	87 e0       	ldi	r24, 0x07	; 7
 448:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(0x10);					//Set SQWE bit to '1'
 44c:	80 e1       	ldi	r24, 0x10	; 16
 44e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_stop();							//Stop condition
 452:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
	rtc_clear_CH_bit();					//Clear CH bit to enable the oscillator
 456:	0e 94 f6 01 	call	0x3ec	; 0x3ec <rtc_clear_CH_bit>
}
 45a:	08 95       	ret

0000045c <rtc_getTime>:
}

/**********************************************************************************/

void rtc_getTime(uint8_t* sec, uint8_t* min, uint8_t* hour)
{
 45c:	ef 92       	push	r14
 45e:	ff 92       	push	r15
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	ec 01       	movw	r28, r24
 46a:	8b 01       	movw	r16, r22
 46c:	7a 01       	movw	r14, r20
	TWI_start();
 46e:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,WRITE);
 472:	80 ed       	ldi	r24, 0xD0	; 208
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	TWI_sendData(0x00);
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_stop();
 480:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
	
	TWI_start();
 484:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,READ);
 488:	80 ed       	ldi	r24, 0xD0	; 208
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	*sec  = TWI_receiveData(0);
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 496:	88 83       	st	Y, r24
	*min  = TWI_receiveData(0);
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 49e:	f8 01       	movw	r30, r16
 4a0:	80 83       	st	Z, r24
	*hour = TWI_receiveData(1);
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 4a8:	f7 01       	movw	r30, r14
 4aa:	80 83       	st	Z, r24
	TWI_stop();	
 4ac:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	08 95       	ret

000004be <rtc_setTime>:

/**********************************************************************************/
void rtc_setTime(uint8_t sec, uint8_t min, uint8_t hour)
{
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	c8 2f       	mov	r28, r24
 4c6:	d6 2f       	mov	r29, r22
 4c8:	14 2f       	mov	r17, r20
	TWI_start();
 4ca:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,WRITE);
 4ce:	80 ed       	ldi	r24, 0xD0	; 208
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	TWI_sendData(0x00);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(hour);
 4dc:	81 2f       	mov	r24, r17
 4de:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(min);
 4e2:	8d 2f       	mov	r24, r29
 4e4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(sec);
 4e8:	8c 2f       	mov	r24, r28
 4ea:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_stop();
 4ee:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <rtc_getDate>:

/**********************************************************************************/

void rtc_getDate(uint8_t* day, uint8_t* date, uint8_t* month, uint8_t* year)
{
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
 50c:	8b 01       	movw	r16, r22
 50e:	7a 01       	movw	r14, r20
 510:	69 01       	movw	r12, r18
	TWI_start();
 512:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,WRITE);
 516:	80 ed       	ldi	r24, 0xD0	; 208
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	TWI_sendData(0x03);
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_stop();
 524:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
	
	TWI_start();
 528:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,READ);
 52c:	80 ed       	ldi	r24, 0xD0	; 208
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	*day   = TWI_receiveData(0);
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 53a:	88 83       	st	Y, r24
	*date  = TWI_receiveData(0);
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 542:	f8 01       	movw	r30, r16
 544:	80 83       	st	Z, r24
	*month = TWI_receiveData(0);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 54c:	f7 01       	movw	r30, r14
 54e:	80 83       	st	Z, r24
	*year  = TWI_receiveData(1);
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 556:	f6 01       	movw	r30, r12
 558:	80 83       	st	Z, r24
	TWI_stop();
 55a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
}
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	df 90       	pop	r13
 56c:	cf 90       	pop	r12
 56e:	08 95       	ret

00000570 <rtc_setDate>:

/**********************************************************************************/
void rtc_setDate(uint8_t day, uint8_t date, uint8_t month, uint8_t year)
{
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	08 2f       	mov	r16, r24
 57a:	16 2f       	mov	r17, r22
 57c:	d4 2f       	mov	r29, r20
 57e:	c2 2f       	mov	r28, r18
	TWI_start();
 580:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
	TWI_sendAddress(0xD0,WRITE);
 584:	80 ed       	ldi	r24, 0xD0	; 208
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
	TWI_sendData(0x03);
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(day);
 592:	80 2f       	mov	r24, r16
 594:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(date);
 598:	81 2f       	mov	r24, r17
 59a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(month);
 59e:	8d 2f       	mov	r24, r29
 5a0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_sendData(year);
 5a4:	8c 2f       	mov	r24, r28
 5a6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
	TWI_stop();
 5aa:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <rtc_setMode>:

/**********************************************************************************/

void rtc_setMode (uint8_t mode)
{
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
	uint8_t hours = 0;
	if(mode == 12)
 5be:	8c 30       	cpi	r24, 0x0C	; 12
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <rtc_setMode+0xc>
 5c2:	4a c0       	rjmp	.+148    	; 0x658 <rtc_setMode+0xa0>
	{
		TWI_start();
 5c4:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
		TWI_sendAddress(0xD0,WRITE);
 5c8:	80 ed       	ldi	r24, 0xD0	; 208
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
		TWI_sendData(0x02);
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
		TWI_start();
 5d6:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
		TWI_sendAddress(0xD0,READ);
 5da:	80 ed       	ldi	r24, 0xD0	; 208
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
		hours = TWI_receiveData(1);
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 5e8:	18 2f       	mov	r17, r24
			lcd_print(itoa((int)hours,str,10));
 5ea:	cd ee       	ldi	r28, 0xED	; 237
 5ec:	d0 e0       	ldi	r29, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	be 01       	movw	r22, r28
 5f2:	4a e0       	ldi	r20, 0x0A	; 10
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 5fa:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5fe:	8f e7       	ldi	r24, 0x7F	; 127
 600:	9a e1       	ldi	r25, 0x1A	; 26
 602:	a6 e0       	ldi	r26, 0x06	; 6
 604:	81 50       	subi	r24, 0x01	; 1
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	a0 40       	sbci	r26, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <rtc_setMode+0x4c>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <rtc_setMode+0x56>
 60e:	00 00       	nop
			_delay_ms(2000);
		hours |= (1 << 6);
 610:	10 64       	ori	r17, 0x40	; 64
			lcd_print(itoa((int)hours,str,10));
 612:	81 2f       	mov	r24, r17
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	be 01       	movw	r22, r28
 618:	4a e0       	ldi	r20, 0x0A	; 10
 61a:	50 e0       	ldi	r21, 0x00	; 0
 61c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <itoa>
 620:	0e 94 84 04 	call	0x908	; 0x908 <lcd_print>
 624:	8f e7       	ldi	r24, 0x7F	; 127
 626:	9a e1       	ldi	r25, 0x1A	; 26
 628:	a6 e0       	ldi	r26, 0x06	; 6
 62a:	81 50       	subi	r24, 0x01	; 1
 62c:	90 40       	sbci	r25, 0x00	; 0
 62e:	a0 40       	sbci	r26, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <rtc_setMode+0x72>
 632:	00 c0       	rjmp	.+0      	; 0x634 <rtc_setMode+0x7c>
 634:	00 00       	nop
			_delay_ms(2000);
		TWI_stop();
 636:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
		
		TWI_start();
 63a:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
		TWI_sendAddress(0xD0,WRITE);
 63e:	80 ed       	ldi	r24, 0xD0	; 208
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
		TWI_sendData(0x02);
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
		TWI_sendData(hours);
 64c:	81 2f       	mov	r24, r17
 64e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
		TWI_stop();
 652:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
 656:	24 c0       	rjmp	.+72     	; 0x6a0 <rtc_setMode+0xe8>
	}
	
	else
	{
		TWI_start();
 658:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
		TWI_sendAddress(0xD0,WRITE);
 65c:	80 ed       	ldi	r24, 0xD0	; 208
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
		TWI_sendData(0x02);
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
		TWI_start();
 66a:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
		TWI_sendAddress(0xD0,READ);
 66e:	80 ed       	ldi	r24, 0xD0	; 208
 670:	61 e0       	ldi	r22, 0x01	; 1
 672:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
		hours = TWI_receiveData(1);
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	0e 94 df 04 	call	0x9be	; 0x9be <TWI_receiveData>
 67c:	c8 2f       	mov	r28, r24
		hours &= ~(1 << 6);
		TWI_stop();
 67e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
		
		TWI_start();
 682:	0e 94 c7 04 	call	0x98e	; 0x98e <TWI_start>
		TWI_sendAddress(0xD0,WRITE);
 686:	80 ed       	ldi	r24, 0xD0	; 208
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	0e 94 cd 04 	call	0x99a	; 0x99a <TWI_sendAddress>
		TWI_sendData(0x02);
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
		TWI_sendData(hours);
 694:	8c 2f       	mov	r24, r28
 696:	8f 7b       	andi	r24, 0xBF	; 191
 698:	0e 94 d5 04 	call	0x9aa	; 0x9aa <TWI_sendData>
		TWI_stop();
 69c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TWI_stop>
	}
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	08 95       	ret

000006a8 <set_externalInterrupt>:
#include <avr/io.h>
#include "external_interrupts.h"

void set_externalInterrupt(unsigned char interrupt_num, unsigned char state)
{
	switch(interrupt_num)
 6a8:	86 30       	cpi	r24, 0x06	; 6
 6aa:	31 f0       	breq	.+12     	; 0x6b8 <set_externalInterrupt+0x10>
 6ac:	87 30       	cpi	r24, 0x07	; 7
 6ae:	e9 f0       	breq	.+58     	; 0x6ea <set_externalInterrupt+0x42>
 6b0:	85 30       	cpi	r24, 0x05	; 5
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <set_externalInterrupt+0xe>
 6b4:	41 c0       	rjmp	.+130    	; 0x738 <set_externalInterrupt+0x90>
 6b6:	32 c0       	rjmp	.+100    	; 0x71c <set_externalInterrupt+0x74>
	{
		case INT0:
			if (state == LOW_LEVEL)
 6b8:	66 23       	and	r22, r22
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <set_externalInterrupt+0x18>
				MCUCR = 0x00;
 6bc:	15 be       	out	0x35, r1	; 53
 6be:	11 c0       	rjmp	.+34     	; 0x6e2 <set_externalInterrupt+0x3a>
			else if (state == CHANGE)
 6c0:	61 30       	cpi	r22, 0x01	; 1
 6c2:	21 f4       	brne	.+8      	; 0x6cc <set_externalInterrupt+0x24>
				MCUCR |= (1 << ISC00);
 6c4:	85 b7       	in	r24, 0x35	; 53
 6c6:	81 60       	ori	r24, 0x01	; 1
 6c8:	85 bf       	out	0x35, r24	; 53
 6ca:	0b c0       	rjmp	.+22     	; 0x6e2 <set_externalInterrupt+0x3a>
			else if (state == FALLING_EDGE)
 6cc:	63 30       	cpi	r22, 0x03	; 3
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <set_externalInterrupt+0x30>
				MCUCR |= (1 << ISC01);
 6d0:	85 b7       	in	r24, 0x35	; 53
 6d2:	82 60       	ori	r24, 0x02	; 2
 6d4:	85 bf       	out	0x35, r24	; 53
 6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <set_externalInterrupt+0x3a>
			else if (state == RISING_EDGE)	
 6d8:	62 30       	cpi	r22, 0x02	; 2
 6da:	19 f4       	brne	.+6      	; 0x6e2 <set_externalInterrupt+0x3a>
				MCUCR |= ((1 << ISC00) | (1 << ISC01));	
 6dc:	85 b7       	in	r24, 0x35	; 53
 6de:	83 60       	ori	r24, 0x03	; 3
 6e0:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT0);
 6e2:	8b b7       	in	r24, 0x3b	; 59
 6e4:	80 64       	ori	r24, 0x40	; 64
 6e6:	8b bf       	out	0x3b, r24	; 59
		break;
 6e8:	08 95       	ret
		
		case INT1:
			if (state == LOW_LEVEL)
 6ea:	66 23       	and	r22, r22
 6ec:	11 f4       	brne	.+4      	; 0x6f2 <set_externalInterrupt+0x4a>
				MCUCR = 0x00;
 6ee:	15 be       	out	0x35, r1	; 53
 6f0:	11 c0       	rjmp	.+34     	; 0x714 <set_externalInterrupt+0x6c>
			else if (state == CHANGE)
 6f2:	61 30       	cpi	r22, 0x01	; 1
 6f4:	21 f4       	brne	.+8      	; 0x6fe <set_externalInterrupt+0x56>
				MCUCR |= (1 << ISC10);
 6f6:	85 b7       	in	r24, 0x35	; 53
 6f8:	84 60       	ori	r24, 0x04	; 4
 6fa:	85 bf       	out	0x35, r24	; 53
 6fc:	0b c0       	rjmp	.+22     	; 0x714 <set_externalInterrupt+0x6c>
			else if (state == FALLING_EDGE)
 6fe:	63 30       	cpi	r22, 0x03	; 3
 700:	21 f4       	brne	.+8      	; 0x70a <set_externalInterrupt+0x62>
				MCUCR |= (1 << ISC11);
 702:	85 b7       	in	r24, 0x35	; 53
 704:	88 60       	ori	r24, 0x08	; 8
 706:	85 bf       	out	0x35, r24	; 53
 708:	05 c0       	rjmp	.+10     	; 0x714 <set_externalInterrupt+0x6c>
			else if (state == RISING_EDGE)
 70a:	62 30       	cpi	r22, 0x02	; 2
 70c:	19 f4       	brne	.+6      	; 0x714 <set_externalInterrupt+0x6c>
				MCUCR |= (1 << ISC10) | (1 << ISC11);
 70e:	85 b7       	in	r24, 0x35	; 53
 710:	8c 60       	ori	r24, 0x0C	; 12
 712:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT1);
 714:	8b b7       	in	r24, 0x3b	; 59
 716:	80 68       	ori	r24, 0x80	; 128
 718:	8b bf       	out	0x3b, r24	; 59
		break;
 71a:	08 95       	ret
		
		case INT2:
			if (state == FALLING_EDGE)
 71c:	63 30       	cpi	r22, 0x03	; 3
 71e:	21 f4       	brne	.+8      	; 0x728 <set_externalInterrupt+0x80>
				MCUCR &= ~(1 << ISC2);
 720:	85 b7       	in	r24, 0x35	; 53
 722:	8f 7b       	andi	r24, 0xBF	; 191
 724:	85 bf       	out	0x35, r24	; 53
 726:	05 c0       	rjmp	.+10     	; 0x732 <set_externalInterrupt+0x8a>
			else if (state == RISING_EDGE)
 728:	62 30       	cpi	r22, 0x02	; 2
 72a:	19 f4       	brne	.+6      	; 0x732 <set_externalInterrupt+0x8a>
				MCUCR |= (1 << ISC2);
 72c:	85 b7       	in	r24, 0x35	; 53
 72e:	80 64       	ori	r24, 0x40	; 64
 730:	85 bf       	out	0x35, r24	; 53
			GICR |= (1 << INT2);
 732:	8b b7       	in	r24, 0x3b	; 59
 734:	80 62       	ori	r24, 0x20	; 32
 736:	8b bf       	out	0x3b, r24	; 59
 738:	08 95       	ret

0000073a <delay_us>:
#include <util/delay.h>

//*******************************************************************************
void delay_us(int d)
{
	while(d--) 
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	19 f0       	breq	.+6      	; 0x744 <delay_us+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 73e:	00 00       	nop
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	e9 f7       	brne	.-6      	; 0x73e <delay_us+0x4>
 744:	08 95       	ret

00000746 <delay_ms>:
	}
}
//*******************************************************************************
void delay_ms(int d)
{
	while(d--)
 746:	00 97       	sbiw	r24, 0x00	; 0
 748:	41 f0       	breq	.+16     	; 0x75a <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 74a:	e9 ef       	ldi	r30, 0xF9	; 249
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	31 97       	sbiw	r30, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <delay_ms+0x8>
 752:	00 c0       	rjmp	.+0      	; 0x754 <delay_ms+0xe>
 754:	00 00       	nop
 756:	01 97       	sbiw	r24, 0x01	; 1
 758:	c1 f7       	brne	.-16     	; 0x74a <delay_ms+0x4>
 75a:	08 95       	ret

0000075c <lcdCommand>:
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
	delay_us(100);                                                     //wait
}
//******************************************************************************
void lcdCommand(unsigned char cmnd)
{
 75c:	cf 93       	push	r28
 75e:	c8 2f       	mov	r28, r24
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);                             //taking high nibble of cmnd
 760:	8b b3       	in	r24, 0x1b	; 27
 762:	9c 2f       	mov	r25, r28
 764:	90 7f       	andi	r25, 0xF0	; 240
 766:	8f 70       	andi	r24, 0x0F	; 15
 768:	89 2b       	or	r24, r25
 76a:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT &= ~(1<<LCD_RS);	       		                        //RS = 0 for command (IR Register)
 76c:	d8 98       	cbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);			                        //RW = 0 for Write
 76e:	d9 98       	cbi	0x1b, 1	; 27
 	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L			                                //wait to make EN wider (min 450 ns)
 770:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L	
 77a:	da 98       	cbi	0x1b, 2	; 27
        
	delay_us(20);                                                     //Wait some time
 77c:	84 e1       	ldi	r24, 0x14	; 20
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
        
	LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);                               //taking low nibble of cmnd
 784:	8b b3       	in	r24, 0x1b	; 27
 786:	c2 95       	swap	r28
 788:	c0 7f       	andi	r28, 0xF0	; 240
 78a:	8f 70       	andi	r24, 0x0F	; 15
 78c:	c8 2b       	or	r28, r24
 78e:	cb bb       	out	0x1b, r28	; 27
	LCD_PRT |= (1<<LCD_EN);			                                //EN = 1 for H-to-L
 790:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);			                                //wait to make enable wider (min 450 ns)
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
 79a:	da 98       	cbi	0x1b, 2	; 27
}
 79c:	cf 91       	pop	r28
 79e:	08 95       	ret

000007a0 <lcd_init>:
}
//******************************************************************************
void lcd_init(void)
{       
    //lcd_reset();
	LCD_DDR = 0xFF;
 7a0:	8f ef       	ldi	r24, 0xFF	; 255
 7a2:	8a bb       	out	0x1a, r24	; 26
	delay_us(2000);
 7a4:	80 ed       	ldi	r24, 0xD0	; 208
 7a6:	97 e0       	ldi	r25, 0x07	; 7
 7a8:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
    /* Function set */
    lcdCommand(0x33);							   //$28 for 4-bit mode
 7ac:	83 e3       	ldi	r24, 0x33	; 51
 7ae:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);                                                     //wait
 7b2:	84 e6       	ldi	r24, 0x64	; 100
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
        
    /* Display ON/OFF Control */
	lcdCommand(0x32);                               //display on, cursor on, blinking
 7ba:	82 e3       	ldi	r24, 0x32	; 50
 7bc:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);														//wait
 7c0:	84 e6       	ldi	r24, 0x64	; 100
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
        
   
	lcdCommand(LCD_FUNCTION_4BIT_2LINES);
 7c8:	88 e2       	ldi	r24, 0x28	; 40
 7ca:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);					                        //clear LCD
 7ce:	84 e6       	ldi	r24, 0x64	; 100
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	
	lcdCommand(LCD_DISP_ON);
 7d6:	8c e0       	ldi	r24, 0x0C	; 12
 7d8:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);
 7dc:	84 e6       	ldi	r24, 0x64	; 100
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	
	lcdCommand(CLEAR_DISPLAY);
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(2000);														//wait
 7ea:	80 ed       	ldi	r24, 0xD0	; 208
 7ec:	97 e0       	ldi	r25, 0x07	; 7
 7ee:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
        
    /* Entry mode set */
	lcdCommand(LCD_ENTRY_INC_);									//shift && cursor right
 7f2:	86 e0       	ldi	r24, 0x06	; 6
 7f4:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);                                                     //wait
 7f8:	84 e6       	ldi	r24, 0x64	; 100
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
}
 800:	08 95       	ret

00000802 <lcd_reset>:
	}
}
//******************************************************************************
void lcd_reset(void)
{
	LCD_DDR = 0xFF;					                        //LCD port is output
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	8a bb       	out	0x1a, r24	; 26
	LCD_PRT &= ~(1<<LCD_EN);			                    //LCD_EN = 0
 806:	da 98       	cbi	0x1b, 2	; 27
	delay_us(20000);				                        //wait for stable power (more than 15 ms)
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	9e e4       	ldi	r25, 0x4E	; 78
 80c:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	lcdCommand(0x03);				                        //$30 for reset
 810:	83 e0       	ldi	r24, 0x03	; 3
 812:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(10000);				                        //wait for more than (4.1 ms)
 816:	80 e1       	ldi	r24, 0x10	; 16
 818:	97 e2       	ldi	r25, 0x27	; 39
 81a:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
    lcdCommand(0x03);										//$30 for reset
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(1000);											//wait (for more than (100 us)
 824:	88 ee       	ldi	r24, 0xE8	; 232
 826:	93 e0       	ldi	r25, 0x03	; 3
 828:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
    lcdCommand(0x03);										//$30 for reset
 82c:	83 e0       	ldi	r24, 0x03	; 3
 82e:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(1000);                                         //wait (for more than 100 us)
 832:	88 ee       	ldi	r24, 0xE8	; 232
 834:	93 e0       	ldi	r25, 0x03	; 3
 836:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
    lcdCommand(0x02);										//$20 for reset
 83a:	82 e0       	ldi	r24, 0x02	; 2
 83c:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(1000);                                         //wait (for more than 100 us)
 840:	88 ee       	ldi	r24, 0xE8	; 232
 842:	93 e0       	ldi	r25, 0x03	; 3
 844:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
}
 848:	08 95       	ret

0000084a <lcdData>:
	delay_us(1);			                                //wait to make enable wider (min 450 ns)
	LCD_PRT &= ~(1<<LCD_EN);		                                //EN = 0 for H-to-L
}
//******************************************************************************
void lcdData (unsigned char data)
{
 84a:	cf 93       	push	r28
 84c:	c8 2f       	mov	r28, r24
	LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);	                        //taking high nibble of data
 84e:	8b b3       	in	r24, 0x1b	; 27
 850:	9c 2f       	mov	r25, r28
 852:	90 7f       	andi	r25, 0xF0	; 240
 854:	8f 70       	andi	r24, 0x0F	; 15
 856:	89 2b       	or	r24, r25
 858:	8b bb       	out	0x1b, r24	; 27
	LCD_PRT |= (1<<LCD_RS);												//RS = 1 for data (DR Register)
 85a:	d8 9a       	sbi	0x1b, 0	; 27
	LCD_PRT &= ~(1<<LCD_RW);											//RW = 0 for Write
 85c:	d9 98       	cbi	0x1b, 1	; 27
	LCD_PRT |= (1<<LCD_EN);												//EN = 1 for H-to-L
 85e:	da 9a       	sbi	0x1b, 2	; 27
																		 
	delay_us(1);														//wait to make enable wider (min 450 ns)
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	
	LCD_PRT &= ~(1<<LCD_EN);											//EN = 0 for H-to-L    
 868:	da 98       	cbi	0x1b, 2	; 27
	LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);                           //taking low nibble of data
 86a:	8b b3       	in	r24, 0x1b	; 27
 86c:	c2 95       	swap	r28
 86e:	c0 7f       	andi	r28, 0xF0	; 240
 870:	8f 70       	andi	r24, 0x0F	; 15
 872:	c8 2b       	or	r28, r24
 874:	cb bb       	out	0x1b, r28	; 27
	LCD_PRT |= (1<<LCD_EN);						                        //EN = 1 for H-to-L
 876:	da 9a       	sbi	0x1b, 2	; 27
	delay_us(1);							                            //wait to make enable wider
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	LCD_PRT &= ~(1<<LCD_EN);					                        //EN = 0 for H-to-L
 880:	da 98       	cbi	0x1b, 2	; 27
}
 882:	cf 91       	pop	r28
 884:	08 95       	ret

00000886 <lcd_gotoxy>:
//******************************************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{
 886:	cf 93       	push	r28
 888:	df 93       	push	r29
 88a:	00 d0       	rcall	.+0      	; 0x88c <lcd_gotoxy+0x6>
 88c:	00 d0       	rcall	.+0      	; 0x88e <lcd_gotoxy+0x8>
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
 892:	90 e8       	ldi	r25, 0x80	; 128
 894:	99 83       	std	Y+1, r25	; 0x01
 896:	90 ec       	ldi	r25, 0xC0	; 192
 898:	9a 83       	std	Y+2, r25	; 0x02
 89a:	94 e9       	ldi	r25, 0x94	; 148
 89c:	9b 83       	std	Y+3, r25	; 0x03
 89e:	94 ed       	ldi	r25, 0xD4	; 212
 8a0:	9c 83       	std	Y+4, r25	; 0x04
	lcdCommand(firstcharAdr[y-1] + x - 1);
 8a2:	81 50       	subi	r24, 0x01	; 1
 8a4:	fe 01       	movw	r30, r28
 8a6:	e6 0f       	add	r30, r22
 8a8:	f1 1d       	adc	r31, r1
 8aa:	90 81       	ld	r25, Z
 8ac:	89 0f       	add	r24, r25
 8ae:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);
 8b2:	84 e6       	ldi	r24, 0x64	; 100
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
}
 8ba:	0f 90       	pop	r0
 8bc:	0f 90       	pop	r0
 8be:	0f 90       	pop	r0
 8c0:	0f 90       	pop	r0
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	08 95       	ret

000008c8 <lcd_cursor_on>:
//*******************************************************************************
void lcd_cursor_on(void)
{
	lcdCommand(LCD_DISP_ON_CURSOR_BLINK);
 8c8:	8f e0       	ldi	r24, 0x0F	; 15
 8ca:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);
 8ce:	84 e6       	ldi	r24, 0x64	; 100
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
}
 8d6:	08 95       	ret

000008d8 <lcd_cursor_off>:
//*******************************************************************************
void lcd_cursor_off(void)
{
	lcdCommand(LCD_DISP_ON);
 8d8:	8c e0       	ldi	r24, 0x0C	; 12
 8da:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);
 8de:	84 e6       	ldi	r24, 0x64	; 100
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
}
 8e6:	08 95       	ret

000008e8 <lcd_move_cursor_left>:
//*******************************************************************************
void lcd_move_cursor_left(void)
{
	lcdCommand(LCD_MOVE_CURSOR_LEFT);
 8e8:	80 e1       	ldi	r24, 0x10	; 16
 8ea:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);
 8ee:	84 e6       	ldi	r24, 0x64	; 100
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
}
 8f6:	08 95       	ret

000008f8 <lcd_move_cursor_right>:

//*******************************************************************************
void lcd_move_cursor_right(void)
{
	lcdCommand(LCD_MOVE_CURSOR_RIGHT);
 8f8:	84 e1       	ldi	r24, 0x14	; 20
 8fa:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(100);
 8fe:	84 e6       	ldi	r24, 0x64	; 100
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
}
 906:	08 95       	ret

00000908 <lcd_print>:

//*******************************************************************************
void lcd_print(char *str)
{
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	8c 01       	movw	r16, r24
	unsigned char i = 0;
	
	while(str[i] != 0)
 910:	fc 01       	movw	r30, r24
 912:	80 81       	ld	r24, Z
 914:	88 23       	and	r24, r24
 916:	51 f0       	breq	.+20     	; 0x92c <lcd_print+0x24>
}

//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
 918:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[i] != 0)
	{
		lcdData(str[i]);
 91a:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
		i++;
 91e:	cf 5f       	subi	r28, 0xFF	; 255
//*******************************************************************************
void lcd_print(char *str)
{
	unsigned char i = 0;
	
	while(str[i] != 0)
 920:	f8 01       	movw	r30, r16
 922:	ec 0f       	add	r30, r28
 924:	f1 1d       	adc	r31, r1
 926:	80 81       	ld	r24, Z
 928:	88 23       	and	r24, r24
 92a:	b9 f7       	brne	.-18     	; 0x91a <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <lcd_clear>:
//*******************************************************************************
void lcd_clear(void)
{
	lcdCommand(CLEAR_DISPLAY);
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
	delay_us(2000);
 93a:	80 ed       	ldi	r24, 0xD0	; 208
 93c:	97 e0       	ldi	r25, 0x07	; 7
 93e:	0e 94 9d 03 	call	0x73a	; 0x73a <delay_us>
	lcd_gotoxy(1,1);
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	61 e0       	ldi	r22, 0x01	; 1
 946:	0e 94 43 04 	call	0x886	; 0x886 <lcd_gotoxy>
}
 94a:	08 95       	ret

0000094c <lcd_generate>:
// LCD_build(1,pattern);
//
//LCD Ports are same as discussed in previous sections
 
void lcd_generate(unsigned char location, unsigned char *ptr)
{
 94c:	0f 93       	push	r16
 94e:	1f 93       	push	r17
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	06 2f       	mov	r16, r22
 956:	17 2f       	mov	r17, r23
	unsigned char i;
	if(location<8)
 958:	88 30       	cpi	r24, 0x08	; 8
 95a:	70 f4       	brcc	.+28     	; 0x978 <lcd_generate+0x2c>
	{
		lcdCommand(0x40+(location*8));
 95c:	88 0f       	add	r24, r24
 95e:	88 0f       	add	r24, r24
 960:	88 0f       	add	r24, r24
 962:	80 5c       	subi	r24, 0xC0	; 192
 964:	0e 94 ae 03 	call	0x75c	; 0x75c <lcdCommand>
 968:	c0 2f       	mov	r28, r16
 96a:	d1 2f       	mov	r29, r17
 96c:	18 e0       	ldi	r17, 0x08	; 8
		for(i=0;i<8;i++)
		{
			lcdData(ptr[i]);	
 96e:	89 91       	ld	r24, Y+
 970:	0e 94 25 04 	call	0x84a	; 0x84a <lcdData>
 974:	11 50       	subi	r17, 0x01	; 1
{
	unsigned char i;
	if(location<8)
	{
		lcdCommand(0x40+(location*8));
		for(i=0;i<8;i++)
 976:	d9 f7       	brne	.-10     	; 0x96e <lcd_generate+0x22>
		{
			lcdData(ptr[i]);	
		}	
	}
}
 978:	df 91       	pop	r29
 97a:	cf 91       	pop	r28
 97c:	1f 91       	pop	r17
 97e:	0f 91       	pop	r16
 980:	08 95       	ret

00000982 <TWI_initMaster>:

/************************************************************************************/

void TWI_initMaster(uint8_t twsr, uint8_t twbr)
{
    TWSR = twsr;					//Set prescaler bits
 982:	81 b9       	out	0x01, r24	; 1
	TWBR = twbr;					//Set prescaler bits
 984:	60 b9       	out	0x00, r22	; 0
	TWCR |= (1 << TWEN);			//Enable the TWI Module
 986:	86 b7       	in	r24, 0x36	; 54
 988:	84 60       	ori	r24, 0x04	; 4
 98a:	86 bf       	out	0x36, r24	; 54
}
 98c:	08 95       	ret

0000098e <TWI_start>:

/************************************************************************************/

void TWI_start(void)
{
	TWCR = (1 << TWEN) | (1 << TWSTA) | (1 << TWINT);
 98e:	84 ea       	ldi	r24, 0xA4	; 164
 990:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & (1 << TWINT)) == 0);
 992:	06 b6       	in	r0, 0x36	; 54
 994:	07 fe       	sbrs	r0, 7
 996:	fd cf       	rjmp	.-6      	; 0x992 <TWI_start+0x4>
}
 998:	08 95       	ret

0000099a <TWI_sendAddress>:

/************************************************************************************/

void TWI_sendAddress(uint8_t Address, uint8_t RW)
{
	Address |= RW;
 99a:	86 2b       	or	r24, r22
	TWDR = Address;
 99c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWEN) | (1 << TWINT);
 99e:	84 e8       	ldi	r24, 0x84	; 132
 9a0:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & (1 << TWINT)) == 0);
 9a2:	06 b6       	in	r0, 0x36	; 54
 9a4:	07 fe       	sbrs	r0, 7
 9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <TWI_sendAddress+0x8>
}
 9a8:	08 95       	ret

000009aa <TWI_sendData>:

/************************************************************************************/

void TWI_sendData(uint8_t Data)
{
	TWDR = Data;
 9aa:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWEN) | (1 << TWINT);
 9ac:	84 e8       	ldi	r24, 0x84	; 132
 9ae:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & (1 << TWINT)) == 0);
 9b0:	06 b6       	in	r0, 0x36	; 54
 9b2:	07 fe       	sbrs	r0, 7
 9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <TWI_sendData+0x6>
}
 9b6:	08 95       	ret

000009b8 <TWI_stop>:

/************************************************************************************/

void TWI_stop(void)
{
	TWCR = (1 << TWEN) | (1 << TWSTO) | (1 << TWINT);
 9b8:	84 e9       	ldi	r24, 0x94	; 148
 9ba:	86 bf       	out	0x36, r24	; 54
}
 9bc:	08 95       	ret

000009be <TWI_receiveData>:

/************************************************************************************/

uint8_t TWI_receiveData(uint8_t is_last_byte)
{
	if(is_last_byte)
 9be:	88 23       	and	r24, r24
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <TWI_receiveData+0xa>
	{
		//Receive data and return NACK
		TWCR = (1 << TWEN) | (1 << TWINT);
 9c2:	84 e8       	ldi	r24, 0x84	; 132
 9c4:	86 bf       	out	0x36, r24	; 54
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <TWI_receiveData+0xe>
	}
	else
	{
		//Receive data and return ACK
		TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 9c8:	84 ec       	ldi	r24, 0xC4	; 196
 9ca:	86 bf       	out	0x36, r24	; 54
	}
	while((TWCR & (1 << TWINT)) == 0);
 9cc:	06 b6       	in	r0, 0x36	; 54
 9ce:	07 fe       	sbrs	r0, 7
 9d0:	fd cf       	rjmp	.-6      	; 0x9cc <TWI_receiveData+0xe>
	return TWDR;
 9d2:	83 b1       	in	r24, 0x03	; 3
}
 9d4:	08 95       	ret

000009d6 <TWI_initSlave>:

/************************************************************************************/

void TWI_initSlave (uint8_t slaveAddress)
{
	TWCR = (1 << TWEN);
 9d6:	94 e0       	ldi	r25, 0x04	; 4
 9d8:	96 bf       	out	0x36, r25	; 54
	TWAR = slaveAddress;
 9da:	82 b9       	out	0x02, r24	; 2
	TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
 9dc:	84 ec       	ldi	r24, 0xC4	; 196
 9de:	86 bf       	out	0x36, r24	; 54
}
 9e0:	08 95       	ret

000009e2 <TWI_listen>:

/************************************************************************************/

void TWI_listen(void)
{
	while ((TWCR & (1 << TWINT)) == 0);
 9e2:	06 b6       	in	r0, 0x36	; 54
 9e4:	07 fe       	sbrs	r0, 7
 9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <TWI_listen>
}
 9e8:	08 95       	ret

000009ea <TWI_readStatus>:
/************************************************************************************/

uint8_t TWI_readStatus(void)
{
	uint8_t status = 0;
	status = TWSR & 0xF8;
 9ea:	81 b1       	in	r24, 0x01	; 1
	return status;
}
 9ec:	88 7f       	andi	r24, 0xF8	; 248
 9ee:	08 95       	ret

000009f0 <itoa>:
 9f0:	fb 01       	movw	r30, r22
 9f2:	9f 01       	movw	r18, r30
 9f4:	e8 94       	clt
 9f6:	42 30       	cpi	r20, 0x02	; 2
 9f8:	c4 f0       	brlt	.+48     	; 0xa2a <itoa+0x3a>
 9fa:	45 32       	cpi	r20, 0x25	; 37
 9fc:	b4 f4       	brge	.+44     	; 0xa2a <itoa+0x3a>
 9fe:	4a 30       	cpi	r20, 0x0A	; 10
 a00:	29 f4       	brne	.+10     	; 0xa0c <itoa+0x1c>
 a02:	97 fb       	bst	r25, 7
 a04:	1e f4       	brtc	.+6      	; 0xa0c <itoa+0x1c>
 a06:	90 95       	com	r25
 a08:	81 95       	neg	r24
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	64 2f       	mov	r22, r20
 a0e:	77 27       	eor	r23, r23
 a10:	0e 94 29 05 	call	0xa52	; 0xa52 <__udivmodhi4>
 a14:	80 5d       	subi	r24, 0xD0	; 208
 a16:	8a 33       	cpi	r24, 0x3A	; 58
 a18:	0c f0       	brlt	.+2      	; 0xa1c <itoa+0x2c>
 a1a:	89 5d       	subi	r24, 0xD9	; 217
 a1c:	81 93       	st	Z+, r24
 a1e:	cb 01       	movw	r24, r22
 a20:	00 97       	sbiw	r24, 0x00	; 0
 a22:	a1 f7       	brne	.-24     	; 0xa0c <itoa+0x1c>
 a24:	16 f4       	brtc	.+4      	; 0xa2a <itoa+0x3a>
 a26:	5d e2       	ldi	r21, 0x2D	; 45
 a28:	51 93       	st	Z+, r21
 a2a:	10 82       	st	Z, r1
 a2c:	c9 01       	movw	r24, r18
 a2e:	0c 94 19 05 	jmp	0xa32	; 0xa32 <strrev>

00000a32 <strrev>:
 a32:	dc 01       	movw	r26, r24
 a34:	fc 01       	movw	r30, r24
 a36:	67 2f       	mov	r22, r23
 a38:	71 91       	ld	r23, Z+
 a3a:	77 23       	and	r23, r23
 a3c:	e1 f7       	brne	.-8      	; 0xa36 <strrev+0x4>
 a3e:	32 97       	sbiw	r30, 0x02	; 2
 a40:	04 c0       	rjmp	.+8      	; 0xa4a <strrev+0x18>
 a42:	7c 91       	ld	r23, X
 a44:	6d 93       	st	X+, r22
 a46:	70 83       	st	Z, r23
 a48:	62 91       	ld	r22, -Z
 a4a:	ae 17       	cp	r26, r30
 a4c:	bf 07       	cpc	r27, r31
 a4e:	c8 f3       	brcs	.-14     	; 0xa42 <strrev+0x10>
 a50:	08 95       	ret

00000a52 <__udivmodhi4>:
 a52:	aa 1b       	sub	r26, r26
 a54:	bb 1b       	sub	r27, r27
 a56:	51 e1       	ldi	r21, 0x11	; 17
 a58:	07 c0       	rjmp	.+14     	; 0xa68 <__udivmodhi4_ep>

00000a5a <__udivmodhi4_loop>:
 a5a:	aa 1f       	adc	r26, r26
 a5c:	bb 1f       	adc	r27, r27
 a5e:	a6 17       	cp	r26, r22
 a60:	b7 07       	cpc	r27, r23
 a62:	10 f0       	brcs	.+4      	; 0xa68 <__udivmodhi4_ep>
 a64:	a6 1b       	sub	r26, r22
 a66:	b7 0b       	sbc	r27, r23

00000a68 <__udivmodhi4_ep>:
 a68:	88 1f       	adc	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	5a 95       	dec	r21
 a6e:	a9 f7       	brne	.-22     	; 0xa5a <__udivmodhi4_loop>
 a70:	80 95       	com	r24
 a72:	90 95       	com	r25
 a74:	bc 01       	movw	r22, r24
 a76:	cd 01       	movw	r24, r26
 a78:	08 95       	ret

00000a7a <_exit>:
 a7a:	f8 94       	cli

00000a7c <__stop_program>:
 a7c:	ff cf       	rjmp	.-2      	; 0xa7c <__stop_program>
